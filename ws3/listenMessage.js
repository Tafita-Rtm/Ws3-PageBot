let activeCommand = null; // Variable pour stocker la commande active (ex: "ai", "gemini")

const listenMessage = async (event, pageAccessToken) => {
  const senderID = event.sender.id;
  const message = event.message.text;
  if (!senderID || !message) return;

  const send = async text => api.sendMessage(senderID, typeof text === "object" ? text : {text}, pageAccessToken);

  // Convertir le message en minuscule et supprimer les espaces au dÃ©but et Ã  la fin
  const normalizedMessage = message.toLowerCase().trim();

  // Commande spÃ©ciale pour activer une IA (ex : "ai", "chatgpt", "gemini")
  if (["ai", "chatgpt", "gemini"].includes(normalizedMessage)) {
    activeCommand = normalizedMessage; // DÃ©finir la commande active
    return send(`ğŸŸ¢ Mode ${activeCommand} activÃ© ! Posez vos questions.`);
  }

  // Commande pour arrÃªter l'IA active
  if (normalizedMessage === "stop" || normalizedMessage === "help") {
    activeCommand = null; // DÃ©sactiver la commande active
    return send("ğŸ”´ Mode dÃ©sactivÃ©. Tapez une commande pour commencer ou utilisez 'help' pour voir les options.");
  }

  // VÃ©rifier si une commande est activÃ©e
  if (activeCommand) {
    // ExÃ©cuter la logique de la commande active (par exemple, envoyer le message Ã  l'IA)
    return handleActiveCommand(activeCommand, message, send);
  }

  // Code existant pour les autres commandes sans prÃ©fixe
  switch (normalizedMessage) {
    case "help": {
      return send("Liste des commandes disponibles : ai, chatgpt, gemini, stop.");
    }
    default: {
      return send("Commande non reconnue. Tapez 'help' pour voir les options.");
    }
  }
};

// Fonction pour gÃ©rer la commande active en mode continu
const handleActiveCommand = async (command, message, send) => {
  // Logique pour chaque IA (ici, simplifiÃ©)
  switch (command) {
    case "ai":
      return send(`ğŸ¤– AI : Vous avez dit "${message}" ? Voici ma rÃ©ponse.`);
    case "chatgpt":
      return send(`ğŸ¤– ChatGPT : Vous avez dit "${message}" ? Voici ma rÃ©ponse.`);
    case "gemini":
      return send(`ğŸ¤– Gemini : Vous avez dit "${message}" ? Voici ma rÃ©ponse.`);
    default:
      return send("Erreur : Commande inconnue.");
  }
};
